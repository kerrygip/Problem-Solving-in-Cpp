*****SELF TEST EXERCISES***********

1. Determine the value of these expression 
sqrt(16.0) = 4
sqrt(16)  = 4
pow(2.0, 3.0) = 8
pow(2, 3) = 8
pow(2.0, 3) = 8
pow(1.1, 2) = 1.21
abs(3) = 3
abs(−3) = 3
abs(0) = 0
fabs(−3.0) = 3 
fabs(−3.5) = 3.5 
fabs(3.5) = 3.5
ceil(5.1) = 6
ceil(5.8) = 6
floor(5.1) = 5
floor(5.8) = 5
pow(3.0, 2)/2.0 = 4.5
pow(3.0, 2)/2 = 4.5
7/abs(−2) = 3.5
(7 + sqrt(4.0))/3.0 = 3
sqrt(pow(3, 2)) = 3

2. Convert into c++
  a. sqrt( x+y)
  b. pow (x, (y+7))
  c. sqrt (area + fudge)
  d. (sqrt(time + tide))/ nobody
  e. -b + (sqrt(pow(b,2)) - (4*a*c))/ (2*a)
  f. abs(x-y)
  
 3. Write a c++ program to compute the sqrt of PI. Use const double PI
 #include<iostream>
#include<cmath>
using namespace std;

int main(){
    double PI;
    cout << sqrt(PI) << endl;
}
// it output 0?

4. Write programs 
  a. Determine whether or not compiler will allow #include<iostream> anywhere on the line or
    if # needs to be flush against the wall
      - online compiler allows
   b. Determine if your compiler will aloow space between include  
      - online compiler allows
      
      
////UNDERSTANDING FUNCTIONS////////

#include<iostream>
#include <cmath>
using namespace std;

//declare the function first
double totalCost(int numberPar, double pricePar);
// formal parameters
//pass by value

int main(){
    int number;
    double price, bill;
    
    
    cout << "enter number of items" << endl;
    cin >> number;
    cout<<"enter price"<< endl;
    cin>> price; 
    
    bill = totalCost(number,price);
    
    //This part gives extra 0 at end of decimal to make it look proper
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout.precision(2);
    // this section gives the extra 0 at the end of the decimal 
    cout << number <<" items at "
        <<"$" << price<< " each\n"
        <<"Final bill, with tax ix $" << bill<< endl;
}

double totalCost(int numberPar, double pricePar){
    double TAX_RATE = 0.05;
    double subtotal;
    
    subtotal = pricePar* numberPar;
        return (subtotal + subtotal* TAX_RATE);
}


5. What is the output?
#include <iostream>
using namespace std;

char mystery(int firstPar, int secondPar);
int main()
{
    cout << mystery(10, 9) << "ow\n";
    return 0;
}
    char mystery(int firstPar, int secondPar)
{
    if (firstPar >= secondPar)
        return 'W';
    else
        return 'H';
}

- Wow

6. Write a function declaration and a function definition for a function that
takes three arguments, all of type int, and that returns the sum of its three
arguments.

// oh man this was tough 
#include <iostream>
using namespace std;

int addition(int firstPar, int secondPar, int thirdPar);
int main()
{
    int first,second,third, total;
    cout << "give me three numbers to add: " << endl;
    cin >> first;
    cin >> second;
    cin >> third;
    total = addition(first, second,third);
    cout << "Total out of three numbers is " << total << endl;
}
    
    int addition(int firstPar, int secondPar, int thirdPar){
        int sum = firstPar + secondPar + thirdPar;
        return sum;
    }


7. Write a function declaration and a function definition for a function
that takes one argument of type int and one argument of type double,
and that returns a value of type double that is the average of the two
arguments.

#include<iostream>
using namespace std;

//Write a function declaration and a function definition for a function
//that takes one argument of type int and one argument of type double,
//and that returns a value of type double that is the average of the two
//arguments.

double average(int argumentOne, double argumentTwo);

int main(){
    // where you have to pass by value 
    double numberOne, numberTwo, total; 
    cout <<"enter two numbers " << endl;
    cin >> numberOne;
    cin>> numberTwo;
    total = (numberOne + numberTwo)/2;
    cout << "the average of the two numbers is " << total << endl;
}

double average(int argumentOne, double argumentTwo){
    double average = (argumentOne+ argumentTwo)/ 2;
    return average; 
}

8. Write a function declaration and a function definition for a function that
takes one argument of type double. The function returns the character
value 'P' if its argument is positive and returns 'N' if its argument is zero
or negative.
// except I didn't get it to go where it would print P or N? 
#include<iostream>
using namespace std;

char positiveTest(double number);

int main(){
    // where you have to pass by value 
    int n1;
    cout <<"enter a number" << endl;
    cin >> n1;
    
}

char positiveTest(double number)
{
if (number > 0)
    return 'P';
else
    return 'N';
}



9. Describle the call by value mechanism
  - It is a substitution process done with the formal parameters that is declared before main
  - The values of the arguments are plugged in to the formal parameters
  - Values are plugged in, not the variables themselves
  - First argument is plugged into the first formal parameter and so on
  - When an argument is plugged in for a formal parameter, argument is plugged in for all instances of the formal paramter
  
10. List the similarities and differences between use of a predefined (that is,
library) function and a user-defined function.
  Predefined Library : it is something that is already made and established, like PI, usually are constants since they've always existed
  User Defined Function: Something that you make that is applicable specifically in your program. 


11. Write a function definition for a function called inOrder that takes three
arguments of type int. The function returns true if the three arguments
are in ascending order; otherwise, it returns false. For example, inOrder
(1, 2, 3) and inOrder(1, 2, 2) both return true, while inOrder(1, 3, 2)
returns false.
#include <iostream>
using namespace std;

int inOrder(int n1, int n2, int n3);

int main(){
    int num1, num2,num3, order;
    cout <<"give me three numbers " << endl;
    cin>> num1;
    cin>>num2;
    cin >> num3
    bool(); // something goes here to connect it. This seems to be my weakest link
    
}
bool inOrder(int n1, int n2, int n3){
    
    return (n1 <= n2 && n2=<n3)
        return true;
}    

12. Write a function definition for a function called even that takes one
argument of type int and returns a bool value. The function returns true
if its one argument is an even number; otherwise, it returns false.
#include<iostream>
using namespace std;

int even(int n1);

int main(){
    int num1;
    cout <<"give me a number " << endl;
    cin>> num1;
    cout << "your numbers are " << /*call the bool here <<*/ endl;
    
}
bool even(int n1){
    return (n1 %2 ==0)
     
}



13. Write a function definition for a function isDigit that takes one argument
of type char and returns a bool value. The function returns true if the
argument is a decimal digit; otherwise, it returns false.

int isDigit(char n1);

int main(){
    int num1;
    cout <<"give me a number " << endl;
    cin>> num1;
    cout << "your numbers are " << /*call the bool here <<*/ endl;
    
}
// there's something that shows decimals. like precision??
int isDigit(int n1){
    if (n1 %2 ==0)
        return false;
    else 
        return true; 
}

14. Write a function definition for a function isRootOf that takes two arguments
of type int and returns a bool value. The function returns true if the first
argument is the square root of the second; otherwise, it returns false.

#include<iostream>
#include<cmath>
using namespace std; 
int isRootOf(int n1, int n2);

int main(){
    int num1, num2;
    cout <<"give me a number " << endl;
    cin>> num1;
    cout << "your numbers are " << /*call the bool here <<*/ endl;
    
}

int isRootOf(int n1, int n2){
    if (sqrt(n1) == n2)
        return true;
    else 
        return false; 
}




15. What is the purpose of the comment that accompanies a function declaration?
// the comment after a function declaration tells the user how the program is supposed to work

16. What is the principle of procedural abstraction as applied to function definitions?
// encapsulation: the user shouyld not have to look at the body to know how it works. The function declaration and comment should 
be all the user needs to know how it works 

17. What does it mean when we say the programmer who uses a function
should be able to treat the function like a black box? (Hint: This question
is very closely related to the previous question.)
// the function should just return the value that is called with the arguments 

18. Carefully describe the process of program testing.
// test the program on input values that you'd know the answer for after doing it by hand

19. Consider two possible definitions for the function unitPrice. One is the
definition given in Display 4.10. The other definition is the same except
that the type cast static_cast<double>(2) is replaced with the constant
2.0; in other words, the line
radius = diameter/static_cast<double>(2);
is replaced with the line
radius = diameter/2.0;
Are these two possible function definitions black-box equivalent?

// dude the pizza box example doesn't work. I did it without functions so I wouldn't know 
//but the answer is yes

Pea example
#include<iostream>
using namespace std;

double estTotal(int minPeas, int maxPeas, int podCount);

int main(){
    
    int maxCount, minCount, podCount;
    double averagePea, yield;
    
    cout<<"enter num/max number of peas in a pod: "<< endl;
    cin >> minCount >> maxCount;
    cout <<"enter number of pods: "<< endl;
    cin >> podCount;
    cout << "enter average weight of peas in ounces "<< endl;
    cin>>averagePea;
    
    yield = estTotal(minCount,maxCount, podCount) * averagePea;
    
    cout<< "min number of peas "<< minCount <<endl;
    cout<< "max number of peas "<< maxCount << endl;
    cout<< "pod count " << podCount<< endl;
    cout<< "average pea weight is "<< averagePea<< endl;
    cout<< "average yield is " << yield << endl;
}

double estTotal(int minPeas, int maxPeas, int podCount){
    double averagePea;
    
    averagePea = (maxPeas + minPeas)/2.0;
    return (podCount * averagePea);
}



//NOTES
// local variables declared inside main are local to main
// local variables declared inside function definition is local to function definition
// so they can have same name but are different variables 

constant demo

#include <iostream>
#include<cmath>
using namespace std;

const double PI = 3.1459;
double area(double radius);
double volume(double radius);

int main(){
    
    double radiusOfBoth, areaOfCircle, volumeOfSphere;
    
    cout<< "enter a radius for both in inches "<< endl;
    cin>> radiusOfBoth;
    
    areaOfCircle = area(radiusOfBoth);
    volumeOfSphere = volume(radiusOfBoth);
    
    cout<< "radius is "<< radiusOfBoth<<endl;
    cout<<"area of circle is "<<areaOfCircle<<endl;
    cout<< "volume of spehere is "<< volumeOfSphere<< endl;
}

double area(double radius){
    return (PI*pow(radius,2));
}

double volume(double radius){
    return(4/3 * PI * pow(radius,3));
}

Law office example 
#include<iostream>
using namespace std; 

const double RATE = 150.00;
double fee(int hoursWorked, int minutesWorked);

int main(){
    int hours,minutes;
    double bill;
    
    cout<<"Enter hours and minutes for consultation "<< endl;
    cin>> hours>> minutes;
    
    bill = fee(hours, minutes);
    
    cout<<"your time is "<< hours <<" hours and "<< minutes<< " minutes " <<endl;
    cout<< "your bill is "<< bill<< endl;
}

double fee(int hoursWorked, int minutesWorked){
    int quarterHours;
    
    minutesWorked= hoursWorked*60 + minutesWorked;
    quarterHours = minutesWorked/15;
    return (quarterHours * RATE);
}



/// Back to self tests

20. If you use a variable in a function definition, where should you declare
the variable? In the function definition? In the main part of the program?
Any place that is convenient?
//If you use a variable, you should declare it in the function definiion.



21. Suppose a function named Function1 has a variable named sam declared
within the definition of Function1, and a function named Function2 also
has a variable named sam declared within the definition of Function2.
Will the program compile (assuming everything else is correct)? If the
program will compile, will it run (assuming that everything else is
correct)? If it runs, will it generate an error message when run (assuming
everything else is correct)? If it runs and does not produce an error
message when run, will it give the correct output (assuming everything
else is correct)?

//Function1(char sam);
//Function2(int sam);
will be fine, even if they are both of the same type because they are local variables to that function

22. The following function is supposed to take as arguments a length
expressed in feet and inches and return the total number of inches in that
many feet and inches. For example, total_inches(1,2) is supposed to
return 14, because 1 foot and 2 inches is the same as 14 inches. Will the
following function perform correctly? If not, why not?
double total_inches(int feet, int inches)
{
inches = 12 * feet + inches;
return inches;
}

//depends on the rest of the function, but should be fine 

23. Write a function declaration and function definition for a function called
readFilter that has no parameters and that returns a value of type
double. The function readFilter prompts the user for a value of type
double and reads the value into a local variable. The function returns the
value read provided this value is greater than or equal to zero and returns
zero if the value read is negative.
#include<iostream>
using namespace std;

// double readFilter();

int main(){
}
double readFilter(){
  double value;
  cout<<"gimme a value"<<endl;
  cin>> value;
  
  if (value >=0)
    return value;
  else
    return 0;


24. Suppose you have two function definitions with the following function
declarations:
double score(double time, double distance);
int score(double points);
Which function definition would be used in the following function call
and why would it be the one used? (x is of type double.)
finalScore = score(x);

it would be the int score since it only calls for one argument 

25. Suppose you have two function definitions with the following function
declarations:
double theAnswer(double data1, double data2);
double theAnswer(double time, int count);
Which function definition would be used in the following function call
and why would it be the one used? (x and y are of type double.)
x = theAnswer(y, 6.0);
it would be double data1 and double data2. since the 2nd argument is of type double. 


26. Suppose you have two function definitions with the function declarations
given in Self-Test Exercise 25. Which function definition would be used in
the following function call and why would it be the one used?
x = theAnswer(5, 6);

this would be the double time, int count: the first one would be converted to double by c++

27. Suppose you have two function definitions with the function declarations
given in Self-Test Exercise 25. Which function definition would be used in
the following function call and why would it be the one used?
x = theAnswer(5, 6.0);

double data1 and double data2: both would be converted to type double

28. This question has to do with the Programming Example “Revised Pizza-
Buying Program.” Suppose the evil pizza parlor that is always trying
to fool customers introduces a square pizza. Can you overload the
function unitprice so that it can compute the price per square inch
of a square pizza as well as the price per square inch of a round pizza?
Why or why not?

too hard 

29. Look at the program in Display 4.18. The main function contains the
using directive:
using namespace std;
Why doesn’t the method unitprice contain this using directive?

The method unitprice doesn't need it because there is nothing that uses the cin/cout that would use std::


*****PRACTICE PROBLEMS *************

1. The length of the hypotenuse of a right-angled triangle is the square root
of the sum of the squares of the other two sides. Write a function calcH
that accept two doubles as function arguments and returns a double.
Prompt the user for the length of base and the perpendicular side of
the triangle. Use the pow and sqrt functions from cmath to perform the
calculations.
2. Modify your program from Practice Program 1 to add a function to
calculate the perimeter of the triangle. Your function calcPerimeter
should accept two arguments and return a double. Your calcPerimeter
function should use your calcH function in working out the perimeter.
Add the perimeter to the output of your program.
3. The price of stocks is sometimes given to the nearest eighth of a dollar; for
example, 297/8 or 891/2. Write a program that computes the value of the
user’s holding of one stock. The program asks for the number of shares of
stock owned, the whole-dollar portion of the price, and the fraction portion.
The fraction portion is to be input as two int values, one for the numerator
and one for the denominator. The program then outputs the value of
the user’s holdings. Your program should allow the user to repeat this
calculation as often as the user wishes and will include a function definition
that has three int arguments consisting of the whole-dollar portion of the
price and the two integers that make up the fraction part. The function
returns the price of one share of stock as a single number of type double.
4. In an exam, students are given a set of questions and 1 point is awarded
for every correct answer and 0.25 points are deducted for every incorrect
answer. Write a program that prompts the user for the number of questions
that the student answered correctly and the number of incorrect answers.
The program should use a function calcMarkAsPercentage to calculate
the student’s final mark as a percentage. Carefully consider the order of
operations required to calculate the correct score and if you need to cast
any values.
5. Modify your program from the previous Practice Program to ask the user
for the number of students whose marks are to be entered. Your program
should then prompt the user for the marks of the required number of students. 
If a student gets a score lower than 0, their mark should be set to
and output as 0. Your program should then print the highest, lowest, and
average score of the students whose scores were calculated.



